#!/usr/bin/env python3
#
# This file is part of teld.
#
# teld is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# teld is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with teld.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing the telescope"""

# pylint: disable=invalid-name

import math
import os
import sys
import time
import Pyro4

TEL_HOST = '192.168.0.101'
TEL_PORT = 9003
TEL_NAME = 'telescope_daemon'

# This timeout is used for an initial ping before running the real command
# The real commands may take much longer than this, so we can't apply the timeout there.
TEL_PING_TIMEOUT = 5

POWER_HOST = '192.168.0.102'
POWER_PORT = 9009
POWER_NAME = 'power_daemon'
POWER_TIMEOUT = 5

TEL_URI = 'PYRO:' + TEL_NAME + '@' + TEL_HOST + ':' + str(TEL_PORT)
POWER_URI = 'PYRO:' + POWER_NAME + '@' + POWER_HOST + ':' + str(POWER_PORT)
SCRIPT_NAME = os.path.basename(sys.argv[0])

# Positions in degrees (alt, az)
PARK_POSITIONS = {
    'stow': (0.616, 0.405, 'general purpose park protecting the mirror and instrument'),
    'zenith': (math.pi / 2, 0, 'park at zenith for maintenance tasks'),
}

# This should be kept in sync with the class in teld
STATUS_CODES = {
    # General error codes
    1: 'error: command failed',
    2: 'error: another command is already running',

    # Command-specific codes
    10: 'error: telescope has not been initialized',
    11: 'error: telescope has not been homed',
    12: 'error: telescope is not tracking',
    13: 'error: telescope is not guiding',
    14: 'error: telescope has already been initialized',
    20: 'error: requested coordinates outside HA limits',
    21: 'error: requested coordinates outside Dec limits',

    # tel specific codes
    -100: 'error: terminated by user',
    -101: 'error: unable to communicate with telescope daemon',
    -102: 'error: unable to communicate with power system daemon',

    -110: 'error: telescope drive power is disabled',
    -111: 'error: telescope cover power is disabled'
}

TELESCOPE_STATE_DESCRIPTIONS = {
    0: u'\033[1m\033[91mOFFLINE\033[0m',
    1: u'\033[1m\033[91mONLINE BUT NOT HOMED\033[0m',
    2: u'\033[1mREADY TO OBSERVE\033[0m',
    3: u'\033[1m\033[92mTRACKING TARGET\033[0m',
    4: u'\033[1m\033[92mGUIDING ON TARGET\033[0m'
}

TELESCOPE_COVER_DESCRIPTIONS = {
    'CV_ABSENT': '\033[1m\033[93mABSENT\033[0m',
    'CV_IDLE': '\033[1mIDLE\033[0m',
    'CV_OPENING': '\033[1m\033[91mOPENING\033[0m',
    'CV_CLOSING': '\033[1m\033[91mCLOSING\033[0m',
    'CV_OPEN': '\033[1m\033[92mOPEN\033[0m',
    'CV_CLOSED': '\033[1m\033[91mCLOSED\033[0m'
}

sys.excepthook = Pyro4.util.excepthook

def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop()

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret in STATUS_CODES:
        print(STATUS_CODES[ret])
    elif ret != -1 and ret != 0:
        print('Returned unknown status code: {0}'.format(ret))
    sys.exit(ret)

def sexagesimal(angle):
    """Formats a decimal number in sexagesimal format"""
    negative = angle < 0
    angle = math.fabs(angle)

    degrees = int(angle)
    angle = (angle - degrees) * 60
    minutes = int(angle)
    seconds = (angle - minutes) * 60

    if negative:
        degrees *= -1

    return '{:d}:{:02d}:{:05.2f}'.format(degrees, minutes, seconds)

def parse_sexagesimal(string):
    """Converts a sexagesimal string to decimal"""
    parts = string.split(':')
    if len(parts) != 3:
        raise ValueError('Invalid input')

    a = float(parts[0])
    b = math.copysign(float(parts[1]), a)
    c = math.copysign(float(parts[2]), a)

    return a + b / 60 + c / 3600

def parse_ra(ra_string):
    """Converts a HH:MM:SS Dec string to radians"""
    return parse_sexagesimal(ra_string) * math.pi / 12

def parse_dec(dec_string):
    """Converts a DD:MM:SS Dec string to radians"""
    return parse_sexagesimal(dec_string) * math.pi / 180

def operate_cover(args):
    """Opens or closes the mirror covers"""
    if len(args) == 1 and (args[0] == 'open' or args[0] == 'close'):
        cover_status = cover_power_status()
        if cover_status != 0:
            return cover_status

        ping_teld()
        with Pyro4.Proxy(TEL_URI) as teld:
            if args[0] == 'open':
                return teld.open_covers()
            else:
                return teld.close_covers()

    print('usage: {} covers [open|close]'.format(SCRIPT_NAME))
    return -1

def park(args):
    """Slews the telescope to a named park position"""
    if len(args) == 1:
        if args[0] not in PARK_POSITIONS:
            print('error: unknown park position \'' + args[0] + '\'')
            return -1

        drive_status = drive_power_status()
        if drive_status != 0:
            return drive_status

        alt_radians, az_radians, _ = PARK_POSITIONS.get(args[0])
        ping_teld()
        with Pyro4.Proxy(TEL_URI) as teld:
            return teld.slew_altaz(alt_radians, az_radians)

    print('usage: {} park <position>'.format(SCRIPT_NAME))
    print()
    for p in PARK_POSITIONS:
        print('   {:6s}    {}'.format(p, PARK_POSITIONS[p][2]))
    print()
    return -1

def slew(args):
    """Slews the telescope to a specified RA,Dec position"""
    if len(args) != 2:
        print('usage: {} slew <HH:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        ra_radians = parse_ra(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a HH:MM:SS.S right ascension.')
        return -1

    try:
        dec_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S declination.')
        return -1

    # TODO: Check against limits

    drive_status = drive_power_status()
    if drive_status != 0:
        return drive_status

    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        return teld.slew_radec(ra_radians, dec_radians)

def track(args):
    """Slews the telescope to a specified RA,Dec position and begins tracking"""
    if len(args) != 2:
        print('usage: {} track <HH:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        ra_radians = parse_ra(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a HH:MM:SS.S right ascension.')
        return -1

    try:
        dec_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S declination.')
        return -1

    # TODO: check against limits

    drive_status = drive_power_status()
    if drive_status != 0:
        return drive_status

    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        return teld.track_radec(ra_radians, dec_radians)

def offset(args):
    """Offsets the telescope by a specified delta RA,Dec"""
    if len(args) != 2:
        print('usage: {} offset <HH:MM:SS.S> <DD:MM:SS.S>'.format(SCRIPT_NAME))
        return -1

    try:
        offset_ra_radians = parse_ra(args[0])
    except ValueError:
        print('error: failed to parse \'' + args[0] + '\' as a HH:MM:SS.S right ascension.')
        return -1

    try:
        offset_dec_radians = parse_dec(args[1])
    except ValueError:
        print('error: failed to parse \'' + args[1] + '\' as a DD:MM:SS.S declination.')
        return -1

    drive_status = drive_power_status()
    if drive_status != 0:
        return drive_status

    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        return teld.offset_radec(offset_ra_radians, offset_dec_radians)

def focus(args):
    """Sets the telescope or instrument focus positions"""
    if len(args) == 2:
        if args[0] == 'telescope':
            try:
                position = float(args[1])
            except ValueError:
                print('error: failed to parse \'' + args[1] + '\' as a focus position.')
                return -1

            ping_teld()
            with Pyro4.Proxy(TEL_URI) as teld:
                return teld.telescope_focus(position)

        if args[0] == 'instrument':
            print('error: instrument focus is not implemented yet')
            return -1

    print('usage: {} focus [telescope|instrument] <position>'.format(SCRIPT_NAME))
    return -1

def calibrate(args):
    """Performs the home and limit calibrations"""
    if len(args) == 1 and (args[0] == 'home' or args[0] == 'limits'):
        drive_status = drive_power_status()
        if drive_status != 0:
            return drive_status

        ping_teld()
        with Pyro4.Proxy(TEL_URI) as teld:
            if args[0] == 'home':
                return teld.find_homes()
            else:
                return teld.find_limits()

    print('usage: {} cal [home|limits]'.format(SCRIPT_NAME))
    return -1

def guide(args):
    """Interact with the autoguider"""
    if len(args) > 0:
        if args[0] == 'start':
            if len(args) < 3:
                print('usage: {} guide start <reference frame> <x binning> <y binning> ' \
                    '<background tile size>'.format(SCRIPT_NAME))
                return -1
            ping_teld()
            with Pyro4.Proxy(TEL_URI) as teld:
                return teld.start_guiding(args[1], int(args[2]), int(args[3]), int(args[4]))
        elif args[0] == 'update':
            if len(args) < 2:
                print('usage: {} guide update <new frame>'.format(SCRIPT_NAME))
                return -1
            ping_teld()
            with Pyro4.Proxy(TEL_URI) as teld:
                return teld.update_guiding(args[1])
        elif args[0] == 'stop':
            ping_teld()
            with Pyro4.Proxy(TEL_URI) as teld:
                return teld.stop_guiding()

    print('usage: {} guide [start|update|stop]'.format(SCRIPT_NAME))
    return -1

def status():
    """Reports the current telescope status"""
    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        data = teld.report_status()

    drive_status = drive_power_status()
    drive_desc = '\033[1m\033[92mENABLED\033[0m'
    if drive_status == -110:
        drive_desc = '\033[1m\033[91mDISABLED\033[0m'
    elif drive_status == -102:
        drive_desc = '\033[1m\033[93mUNKNOWN\033[0m'

    state_desc = u'\033[1m\033[93mUNKNOWN\033[0m'
    if data['state'] in TELESCOPE_STATE_DESCRIPTIONS:
        state_desc = TELESCOPE_STATE_DESCRIPTIONS[data['state']]

    cover_desc = u'\033[1m\033[93mUNKNOWN\033[0m'
    if data['cover_state'] in TELESCOPE_COVER_DESCRIPTIONS:
        cover_desc = TELESCOPE_COVER_DESCRIPTIONS[data['cover_state']]

    ra_desc = sexagesimal(float(data['ra']) * 12 / math.pi)
    dec_desc = sexagesimal(float(data['dec']) * 180 / math.pi)

    alt_desc = sexagesimal(float(data['alt']) * 180 / math.pi)
    az_desc = sexagesimal(float(data['az']) * 180 / math.pi)
    lst_desc = sexagesimal(float(data['lst']) * 12 / math.pi)

    ra_offset_desc = ''
    ra_offset = float(data['offset_ra'])
    if ra_offset != 0:
        ra_offset_coords = sexagesimal(ra_offset * 12 / math.pi)
        ra_offset_desc = ' with offset \033[1m' + ra_offset_coords + '\033[0m'

    dec_offset_desc = ''
    dec_offset = float(data['offset_dec'])
    if dec_offset != 0:
        dec_offset_coords = sexagesimal(dec_offset * 180 / math.pi)
        dec_offset_desc = ' with offset \033[1m' + dec_offset_coords + '\033[0m'

    print('   Telescope is {} (Talon state {}).'.format(state_desc, data['pointing_state']))
    print('   Telescope drive power {}'.format(drive_desc))
    print('   Covers are {} (Talon state {}).'.format(cover_desc, data['cover_state']))
    print('   RA is \033[1m' + ra_desc + '\033[0m' + ra_offset_desc)
    print('   Dec is \033[1m' + dec_desc + '\033[0m' + dec_offset_desc)
    print('   Altitude is \033[1m' + alt_desc + '\033[0m')
    print('   Azimuth is \033[1m' + az_desc + '\033[0m')
    print('   Local sidereal time is \033[1m' + lst_desc + '\033[0m')
    print('   Telescope focus is \033[1m{:.2f}\033[0m um'.format(data['telescope_focus_um']))

    if data['guide_reference_frame'] != None:
        print('   Guiding on frame \033[1m{}\033[0m'.format(data['guide_reference_frame']))
        print('   Using \033[1m{}\033[0m x \033[1m{}\033[0m binning and ' \
            '\033[1m{}\033[0m px background tiles'.format(
                data['guide_x_binning'], data['guide_y_binning'],
                data['guide_background_tile_size']))
        print('   Current guide offset is \033[1m{}\033[0m, \033[1m{}\033[0m'.format(
            sexagesimal(float(data['guide_offset_ra']) / 15),
            sexagesimal(float(data['guide_offset_dec']))))
    return 0

def stop():
    """Stops any active telescope movement"""
    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        return teld.stop()

def initialize():
    """Enables the power and talon daemons"""
    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        return teld.initialize()

def shutdown():
    """Disables the talon daemons and power"""
    ping_teld()
    with Pyro4.Proxy(TEL_URI) as teld:
        return teld.shutdown()

def reboot():
    """Reboots the talon daemons and power"""
    shutdown()
    time.sleep(5)
    return initialize()

def ping_teld():
    timeout = Pyro4.config.COMMTIMEOUT
    Pyro4.config.COMMTIMEOUT = TEL_PING_TIMEOUT
    with Pyro4.Proxy(TEL_URI) as teld:
        teld.ping()

    Pyro4.config.COMMTIMEOUT = timeout

def cover_power_status():
    """Returns 0 if cover power is enabled or an error code"""
    return query_power_daemon('telescope_covers', -111)

def drive_power_status():
    """Returns 0 if drive power is enabled or an error code"""
    return query_power_daemon('telescope_80v', -110)

def query_power_daemon(switch_name, disabled_code):
    """Checks specified PDU switch and returns an error code if disabled"""
    timeout = Pyro4.config.COMMTIMEOUT
    Pyro4.config.COMMTIMEOUT = POWER_TIMEOUT
    try:
        with Pyro4.Proxy(POWER_URI) as powerd:
            powered = powerd.value(switch_name)
            return 0 if powered else disabled_code
    except Pyro4.errors.CommunicationError:
        return -102
    finally:
        Pyro4.config.COMMTIMEOUT = timeout

def print_usage():
    """Prints the utility help"""
    print('usage: {} <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('general commands:')
    print('   status    print a human-readable summary of the telescope status')
    print('   covers    open or close the mirror covers')
    print('   park     park the telescope in a named position')
    print()
    print('observing commands:')
    print('   slew      slew the telescope to a given RA, Dec')
    print('   track     slew the telescope to a given RA, Dec and track the target')
    print('   offset    offset the telescope by a given RA, Dec')
    print('   focus     adjust the telescope or instrument focus')
    print('   stop      immediately stop any telescope movement')
    print('   guide     start, update, or stop the autoguider')
    print()
    print('engineering commands:')
    print('   cal       perform telescope home or limit calibrations')
    print('   init      power on the telescope and start low-level hardware daemons')
    print('   kill      kill low-level hardware daemons and power off the telescope')
    print('   reboot    kill and reinitialize the telescope and low-level daemons')
    print()

    return 0

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage())

    if sys.argv[1] == 'covers':
        run_command(lambda: operate_cover(sys.argv[2:]))
    if sys.argv[1] == 'park':
        run_command(lambda: park(sys.argv[2:]))
    if sys.argv[1] == 'slew':
        run_command(lambda: slew(sys.argv[2:]))
    if sys.argv[1] == 'track':
        run_command(lambda: track(sys.argv[2:]))
    if sys.argv[1] == 'offset':
        run_command(lambda: offset(sys.argv[2:]))
    if sys.argv[1] == 'focus':
        run_command(lambda: focus(sys.argv[2:]))
    if sys.argv[1] == 'cal':
        run_command(lambda: calibrate(sys.argv[2:]))
    if sys.argv[1] == 'guide':
        run_command(lambda: guide(sys.argv[2:]))
    if sys.argv[1] == 'status':
        run_command(status)
    if sys.argv[1] == 'stop':
        run_command(stop)
    if sys.argv[1] == 'init':
        run_command(initialize)
    if sys.argv[1] == 'kill':
        run_command(shutdown)
    if sys.argv[1] == 'reboot':
        run_command(reboot)

    # Command not found
    sys.exit(print_usage())
